{"ast":null,"code":"var _jsxFileName = \"/Users/gaoqiantong/Desktop/comp431/hw/final-frontend-Moongram/src/pages/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MainHeader from '../components/MainHeader';\nimport Posts from '../components/Posts';\nimport UserInfoGrid from '../components/UserInfoGrid';\nimport PostGrid from '../components/PostGrid';\nimport userPostsTest from '../posts.json';\nimport usersInfo from '../users.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [userPosts, setUserPosts] = useState([]);\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [newFollowerName, setNewFollowerName] = useState('');\n  const [followedUsers, setFollowedUsers] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const location = useLocation();\n  const userData = location.state.userData;\n  const defaultPostImage = 'https://media.istockphoto.com/id/1420755455/photo/grunge-dirty-background-overlay.webp?b=1&s=170667a&w=0&k=20&c=7wfOkV1I0RJVAsuZlCzMD8zRenjlWo1hUYCAIsGBckw=';\n  useEffect(() => {\n    // const fetchFollowers = async () => {\n    //     // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    //     // const data = await response.json();\n    //     const data = usersInfo;\n\n    //     if (!Number.isInteger(userData.id)) {\n    //       setFollowedUsers([])\n    //       return ([])\n    //     }\n    //     const loggedInUser = data.find(user => user.id === userData.id);\n    //     const followingIds = Array.from({ length: 3 }, (_, index) => (userData.id + index + 1) % 10 || 10);\n    //     const followedUsersList = data.filter(user => followingIds.includes(user.id) && user.id !== userData.id);\n\n    //     setFollowedUsers(followedUsersList);\n    //     return followedUsersList;\n    // };\n\n    const fetchUserPosts = async followedUsers => {\n      // const responseForLoggedUser = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userData.id}`);\n      // const postsForLoggedUser = await responseForLoggedUser.json();\n      const postsForLoggedUser = userPostsTest.filter(post => post.userId === userData.id);\n      // const postsPromises = followedUsers.map(user => \n      //     fetch(`https://jsonplaceholder.typicode.com/posts?userId=${user.id}`).then(res => res.json())\n      // );\n      const postsPromises = followedUsers.map(user => userPostsTest.filter(post => post.userId === user.id));\n      const postsResults = await Promise.all(postsPromises);\n      const flattenedFollowedUsersPosts = [].concat(...postsResults).map(post => {\n        const userForPost = followedUsers.find(u => u.id === post.userId);\n        return {\n          ...post,\n          user: userForPost,\n          timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n          image: defaultPostImage\n        };\n      });\n      const userPostsList = postsForLoggedUser.map(post => ({\n        ...post,\n        user: userData,\n        timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n        image: defaultPostImage\n      }));\n      const mergedPosts = [...userPostsList, ...flattenedFollowedUsersPosts];\n      const sortedPosts = mergedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      setUserPosts(sortedPosts);\n    };\n    fetchFollowers().then(followedUsers => fetchUserPosts(followedUsers));\n    // fetchFollowers().then(\n    // fetchUserPosts(followedUsers)\n  }, [userData.id]);\n  const handleAddFollower = async () => {\n    // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    // const users = await response.json();\n    const users = usersInfo;\n    const newFollower = users.find(user => user.username.toLowerCase() === newFollowerName.toLowerCase());\n    if (newFollower && newFollower.id != userData.id) {\n      setFollowedUsers([...followedUsers, newFollower]);\n      // const responseForNewFollower = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${newFollower.id}`);\n      // const postsForNewFollower = await responseForNewFollower.json();\n      const postsForNewFollower = userPostsTest.filter(post => post.userId === newFollower.id);\n      const postsWithTimestampAndImage = postsForNewFollower.map(post => ({\n        ...post,\n        user: newFollower,\n        timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n        image: defaultPostImage\n      }));\n      const updatedPosts = [...userPosts, ...postsWithTimestampAndImage];\n      const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      setUserPosts(sortedPosts);\n      setErrorMessage('');\n    } else {\n      setErrorMessage('User not found or invalid.');\n    }\n    setNewFollowerName('');\n  };\n  const handleUnfollow = userId => {\n    const updatedFollowedUsers = followedUsers.filter(user => user.id !== userId);\n    setFollowedUsers(updatedFollowedUsers);\n    const updatedPosts = userPosts.filter(post => post.user.id !== userId);\n    const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    setUserPosts(sortedPosts);\n  };\n  const handleSearch = e => {\n    setSearchQuery(e.target.value);\n  };\n  const handleComment = postId => {};\n  const handleEdit = postId => {};\n  const handlePostSubmit = newPost => {\n    setUserPosts([newPost, ...userPosts]);\n  };\n  const handleStatusUpdate = newStatus => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      navigate: navigate,\n      userData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(UserInfoGrid, {\n        user: userData,\n        onUpdateStatus: handleStatusUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostGrid, {\n        user: userData,\n        onPostSubmit: handlePostSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"follow-user-h2\",\n        children: \"Followed Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"follow-user-ul\",\n        children: followedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"follow-user-li\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"follow-user-img\",\n            src: \"https://media.istockphoto.com/id/1403045742/photo/happy-mixed-race-father-and-son-brushing-their-teeth-together-in-a-bathroom-at-home-single.webp?b=1&s=170667a&w=0&k=20&c=siRQqYPxmZsWtoedb7eoQOzRvQl1GVg_ccCAOsICTCw=\",\n            alt: \"Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: user.company.catchPhrase\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-testid\": `unfollow-${user.id}`,\n            onClick: () => handleUnfollow(user.id),\n            children: \"Unfollow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"se\",\n        type: \"text\",\n        \"data-testid\": \"add-follower-name\",\n        placeholder: \"Enter name\",\n        value: newFollowerName,\n        onChange: e => setNewFollowerName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"add-follower\",\n        onClick: handleAddFollower,\n        children: \"Add Follower\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-testid\": \"search-test\",\n        type: \"text\",\n        placeholder: \"Search by author or text...\",\n        value: searchQuery,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"user-posts\",\n      children: userPosts.filter(post => {\n        return post.title.toLowerCase().includes(searchQuery.toLowerCase()) || post.body.toLowerCase().includes(searchQuery.toLowerCase()) || post.user.username.toLowerCase().includes(searchQuery.toLowerCase());\n      }).map(post => /*#__PURE__*/_jsxDEV(Posts, {\n        post: post,\n        onComment: handleComment,\n        onEdit: handleEdit\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"Hmoy8UbdMOHBiZPd8LyJawX44pM=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","MainHeader","Posts","UserInfoGrid","PostGrid","userPostsTest","usersInfo","jsxDEV","_jsxDEV","MainPage","_s","userPosts","setUserPosts","navigate","searchQuery","setSearchQuery","newFollowerName","setNewFollowerName","followedUsers","setFollowedUsers","errorMessage","setErrorMessage","location","userData","state","defaultPostImage","fetchUserPosts","postsForLoggedUser","filter","post","userId","id","postsPromises","map","user","postsResults","Promise","all","flattenedFollowedUsersPosts","concat","userForPost","find","u","timestamp","Date","now","Math","floor","random","toLocaleString","image","userPostsList","mergedPosts","sortedPosts","sort","a","b","fetchFollowers","then","handleAddFollower","users","newFollower","username","toLowerCase","postsForNewFollower","postsWithTimestampAndImage","updatedPosts","handleUnfollow","updatedFollowedUsers","handleSearch","e","target","value","handleComment","postId","handleEdit","handlePostSubmit","newPost","handleStatusUpdate","newStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onUpdateStatus","onPostSubmit","src","alt","company","catchPhrase","onClick","type","placeholder","onChange","style","color","title","includes","body","onComment","onEdit","_c","$RefreshReg$"],"sources":["/Users/gaoqiantong/Desktop/comp431/hw/final-frontend-Moongram/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MainHeader from '../components/MainHeader';\nimport Posts from '../components/Posts';\nimport UserInfoGrid from '../components/UserInfoGrid';\nimport PostGrid from '../components/PostGrid';\nimport userPostsTest from '../posts.json';\nimport usersInfo from '../users.json'\n\n\nconst MainPage = () => {\n  const [userPosts, setUserPosts] = useState([]);\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [newFollowerName, setNewFollowerName] = useState('');\n  const [followedUsers, setFollowedUsers] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const location = useLocation();\n  const userData = location.state.userData;\n  const defaultPostImage = 'https://media.istockphoto.com/id/1420755455/photo/grunge-dirty-background-overlay.webp?b=1&s=170667a&w=0&k=20&c=7wfOkV1I0RJVAsuZlCzMD8zRenjlWo1hUYCAIsGBckw=';\n  useEffect(() => {\n    // const fetchFollowers = async () => {\n    //     // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    //     // const data = await response.json();\n    //     const data = usersInfo;\n\n    //     if (!Number.isInteger(userData.id)) {\n    //       setFollowedUsers([])\n    //       return ([])\n    //     }\n    //     const loggedInUser = data.find(user => user.id === userData.id);\n    //     const followingIds = Array.from({ length: 3 }, (_, index) => (userData.id + index + 1) % 10 || 10);\n    //     const followedUsersList = data.filter(user => followingIds.includes(user.id) && user.id !== userData.id);\n\n    //     setFollowedUsers(followedUsersList);\n    //     return followedUsersList;\n    // };\n    \n\n    const fetchUserPosts = async (followedUsers) => {\n        // const responseForLoggedUser = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userData.id}`);\n        // const postsForLoggedUser = await responseForLoggedUser.json();\n        const postsForLoggedUser = userPostsTest.filter(post => post.userId === userData.id);\n        // const postsPromises = followedUsers.map(user => \n        //     fetch(`https://jsonplaceholder.typicode.com/posts?userId=${user.id}`).then(res => res.json())\n        // );\n        const postsPromises = followedUsers.map(user => \n          userPostsTest.filter(post => post.userId === user.id)\n        );\n        \n        const postsResults = await Promise.all(postsPromises);\n\n        const flattenedFollowedUsersPosts = [].concat(...postsResults).map(post => {\n            const userForPost = followedUsers.find(u => u.id === post.userId);\n            return {\n                ...post,\n                user: userForPost,\n                timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n                image: defaultPostImage\n            };\n        });\n\n        const userPostsList = postsForLoggedUser.map(post => ({\n            ...post,\n            user: userData,\n            timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n            image: defaultPostImage\n        }));\n\n        const mergedPosts = [...userPostsList, ...flattenedFollowedUsersPosts];\n\n        const sortedPosts = mergedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        setUserPosts(sortedPosts);\n    };\n    fetchFollowers().then(\n      followedUsers => fetchUserPosts(followedUsers));\n    // fetchFollowers().then(\n    // fetchUserPosts(followedUsers)\n\n }, [userData.id]);\n\n\n  const handleAddFollower = async () => {\n    // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    // const users = await response.json();\n    const users = usersInfo;\n\n    const newFollower = users.find(user => user.username.toLowerCase() === newFollowerName.toLowerCase());\n  \n    if (newFollower && newFollower.id != userData.id) {\n      setFollowedUsers([...followedUsers, newFollower]);\n      // const responseForNewFollower = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${newFollower.id}`);\n      // const postsForNewFollower = await responseForNewFollower.json();\n      const postsForNewFollower = userPostsTest.filter(post => post.userId === newFollower.id)\n\n\n      const postsWithTimestampAndImage = postsForNewFollower.map(post => ({\n        ...post,\n        user: newFollower,\n        timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n        image: defaultPostImage\n      }));\n      \n      const updatedPosts = [...userPosts, ...postsWithTimestampAndImage];\n      const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      setUserPosts(sortedPosts);\n      setErrorMessage(''); \n    } else {\n      setErrorMessage('User not found or invalid.');\n    }\n  \n    setNewFollowerName('');\n  };\n  \n\n  const handleUnfollow = userId => {\n    const updatedFollowedUsers = followedUsers.filter(user => user.id !== userId);\n    setFollowedUsers(updatedFollowedUsers);\n    const updatedPosts = userPosts.filter(post => post.user.id !== userId);\n    const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    setUserPosts(sortedPosts);\n  };\n\n  const handleSearch = (e) => {\n    setSearchQuery(e.target.value)\n    \n    \n  };\n\n  const handleComment = postId => {\n  };\n\n  const handleEdit = postId => {\n  \n  };\n\n  const handlePostSubmit = newPost => {\n    setUserPosts([newPost, ...userPosts]);\n  };\n\n  const handleStatusUpdate = newStatus => {\n\n  };\n\n  return (\n    <div>\n      <MainHeader navigate={navigate} userData={userData} />\n      <div className=\"main-content\">\n        <UserInfoGrid user={userData} onUpdateStatus={handleStatusUpdate} />\n        <PostGrid user={userData} onPostSubmit={handlePostSubmit} />\n      </div>\n      <div className=\"sidebar\">\n        <h2 className = \"follow-user-h2\">Followed Users</h2>\n        <ul className=\"follow-user-ul\">\n          {followedUsers.map(user => (\n            <li className='follow-user-li'key={user.id}>\n              <img className='follow-user-img' src=\"https://media.istockphoto.com/id/1403045742/photo/happy-mixed-race-father-and-son-brushing-their-teeth-together-in-a-bathroom-at-home-single.webp?b=1&s=170667a&w=0&k=20&c=siRQqYPxmZsWtoedb7eoQOzRvQl1GVg_ccCAOsICTCw=\" alt=\"Avatar\" />\n              <p>{user.username}</p>\n              <p>{user.company.catchPhrase}</p>\n\n              <button data-testid={`unfollow-${user.id}`} onClick={() => handleUnfollow(user.id)}>Unfollow</button>\n            </li>\n          ))}\n        </ul>\n        <input className='se'\n          type=\"text\"\n          data-testid='add-follower-name'\n          placeholder=\"Enter name\"\n          value={newFollowerName}\n          onChange={e => setNewFollowerName(e.target.value)}\n        />\n        <button data-testid='add-follower' onClick={handleAddFollower}>Add Follower</button>\n        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n\n      </div>\n      <div className=\"search-bar\">\n        <input data-testid='search-test'\n          type=\"text\"\n          placeholder=\"Search by author or text...\"\n          value={searchQuery}\n          onChange={handleSearch}\n        />\n      </div>\n      <div data-testid='user-posts'>\n      {userPosts.filter(post => {\n        return post.title.toLowerCase().includes(searchQuery.toLowerCase()) || post.body.toLowerCase().includes(searchQuery.toLowerCase()) || post.user.username.toLowerCase().includes(searchQuery.toLowerCase()) ;\n      }).map(post => (\n        <Posts\n          key={post.id}\n          post={post}\n          onComment={handleComment}\n          onEdit={handleEdit}\n        />\n      ))}\n    </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}