{"ast":null,"code":"var _jsxFileName = \"/Users/gaoqiantong/Desktop/comp431/hw/final-frontend-Moongram/src/pages/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MainHeader from '../components/MainHeader';\nimport Posts from '../components/Posts';\nimport UserInfoGrid from '../components/UserInfoGrid';\nimport PostGrid from '../components/PostGrid';\nimport userPostsTest from '../posts.json';\nimport usersInfo from '../users.json';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainPage = () => {\n  _s();\n  const [userPosts, setUserPosts] = useState([]);\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [newFollowerName, setNewFollowerName] = useState('');\n  const [followedUsers, setFollowedUsers] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const location = useLocation();\n  const userData = location.state.userData;\n  const defaultPostImage = 'https://media.istockphoto.com/id/1420755455/photo/grunge-dirty-background-overlay.webp?b=1&s=170667a&w=0&k=20&c=7wfOkV1I0RJVAsuZlCzMD8zRenjlWo1hUYCAIsGBckw=';\n  useEffect(() => {\n    // const fetchFollowers = async () => {\n    //     // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    //     // const data = await response.json();\n    //     const data = usersInfo;\n\n    //     if (!Number.isInteger(userData.id)) {\n    //       setFollowedUsers([])\n    //       return ([])\n    //     }\n    //     const loggedInUser = data.find(user => user.id === userData.id);\n    //     const followingIds = Array.from({ length: 3 }, (_, index) => (userData.id + index + 1) % 10 || 10);\n    //     const followedUsersList = data.filter(user => followingIds.includes(user.id) && user.id !== userData.id);\n\n    //     setFollowedUsers(followedUsersList);\n    //     return followedUsersList;\n    // };\n\n    fetchFollowers();\n    const fetchUserPosts = async followedUsers => {\n      // // const responseForLoggedUser = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userData.id}`);\n      // // const postsForLoggedUser = await responseForLoggedUser.json();\n      // const postsForLoggedUser = userPostsTest.filter(post => post.userId === userData.id);\n      // // const postsPromises = followedUsers.map(user => \n      // //     fetch(`https://jsonplaceholder.typicode.com/posts?userId=${user.id}`).then(res => res.json())\n      // // );\n      // const postsPromises = followedUsers.map(user => \n      //   userPostsTest.filter(post => post.userId === user.id)\n      // );\n\n      // const postsResults = await Promise.all(postsPromises);\n\n      // const flattenedFollowedUsersPosts = [].concat(...postsResults).map(post => {\n      //     const userForPost = followedUsers.find(u => u.id === post.userId);\n      //     return {\n      //         ...post,\n      //         user: userForPost,\n      //         timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n      //         image: defaultPostImage\n      //     };\n      // });\n\n      // const userPostsList = postsForLoggedUser.map(post => ({\n      //     ...post,\n      //     user: userData,\n      //     timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n      //     image: defaultPostImage\n      // }));\n\n      // const mergedPosts = [...userPostsList, ...flattenedFollowedUsersPosts];\n\n      // const sortedPosts = mergedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n      // setUserPosts(sortedPosts);\n    };\n    //     fetchFollowers().then(\n    //       followedUsers => fetchUserPosts(followedUsers));\n    //     // fetchFollowers().then(\n    //     // fetchUserPosts(followedUsers)\n    // console.log(followedUsers);\n  }, [userData.username]);\n  const fetchUserPosts = async () => {};\n  const fetchFollowers = async () => {\n    try {\n      console.log(userData.username);\n      const response = await axios.get(`http://localhost:3000/following/${userData.username}`, {\n        withCredentials: true\n      });\n      const usernames = response.data.following;\n      console.log(usernames);\n      if (usernames.length === 0) {\n        return [];\n      }\n      const profiles = await Promise.all(usernames.map(username => axios.get(`http://localhost:3000/profile/${username}`, {\n        withCredentials: true\n      }).then(res => res.data).catch(err => {\n        console.error(`Error fetching profile for ${username}:`, err);\n        return null; // or handle the error as appropriate\n      })));\n\n      setFollowedUsers(profiles);\n      console.log(followedUsers, profiles);\n      return profiles;\n    } catch (error) {\n      console.error('Error fetching followers:', error);\n    }\n  };\n  const handleAddFollower = async () => {\n    if (newFollowerName == userData.username) {\n      setErrorMessage(\"You cannot follow yourself.\");\n      setNewFollowerName('');\n      return;\n    }\n    try {\n      const response = await axios.put(`http://localhost:3000/following/${newFollowerName}`, {}, {\n        withCredentials: true\n      });\n      if (response.data.username == userData.username) {\n        setErrorMessage(\"\");\n        setNewFollowerName('');\n        fetchFollowers();\n      } else {\n        setNewFollowerName('');\n        setErrorMessage(\"user not found.\");\n      }\n    } catch (error) {\n      setNewFollowerName('');\n      setErrorMessage(error.response.data.message);\n    }\n    ;\n  };\n  // const handleAddFollower = async () => {\n  //   console.log(\"get in\")\n  //   try {\n  //     console.log(\"dfdfd\")\n  //     const response = await axios.put(`http://localhost:3000/following/${newFollowerName}`, {}, { withCredentials: true });\n  //     console.log(\"sssss\",response)\n  //     if (response.data.username == userData.username) {\n  //       console.log('Follower added');\n  //     } else {\n  //       console.log('Follower add failed');\n  //       setErrorMessage(\"user not found.\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   };\n  //   // // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  //   // // const users = await response.json();\n  //   // const users = usersInfo;\n\n  //   // const newFollower = users.find(user => user.username.toLowerCase() === newFollowerName.toLowerCase());\n\n  //   // if (newFollower && newFollower.id != userData.id) {\n  //   //   setFollowedUsers([...followedUsers, newFollower]);\n  //   //   // const responseForNewFollower = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${newFollower.id}`);\n  //   //   // const postsForNewFollower = await responseForNewFollower.json();\n  //   //   const postsForNewFollower = userPostsTest.filter(post => post.userId === newFollower.id)\n\n  //   //   const postsWithTimestampAndImage = postsForNewFollower.map(post => ({\n  //   //     ...post,\n  //   //     user: newFollower,\n  //   //     timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n  //   //     image: defaultPostImage\n  //   //   }));\n\n  //   //   const updatedPosts = [...userPosts, ...postsWithTimestampAndImage];\n  //   //   const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  //   //   setUserPosts(sortedPosts);\n  //   //   setErrorMessage(''); \n  //   // } else {\n  //   //   setErrorMessage('User not found or invalid.');\n  //   // }\n\n  //   // setNewFollowerName('');\n  // };\n\n  const handleUnfollow = userId => {\n    const updatedFollowedUsers = followedUsers.filter(user => user.id !== userId);\n    setFollowedUsers(updatedFollowedUsers);\n    const updatedPosts = userPosts.filter(post => post.user.id !== userId);\n    const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    setUserPosts(sortedPosts);\n  };\n  const handleSearch = e => {\n    setSearchQuery(e.target.value);\n  };\n  const handleComment = postId => {};\n  const handleEdit = postId => {};\n  const handlePostSubmit = newPost => {\n    setUserPosts([newPost, ...userPosts]);\n  };\n  const handleStatusUpdate = newStatus => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      navigate: navigate,\n      userData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(UserInfoGrid, {\n        user: userData,\n        onUpdateStatus: handleStatusUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostGrid, {\n        user: userData,\n        onPostSubmit: handlePostSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"follow-user-h2\",\n        children: \"Followed Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"follow-user-ul\",\n        children: followedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"follow-user-li\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"follow-user-img\",\n            src: user.avatar,\n            alt: \"Avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: user.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: user.headline\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            \"data-testid\": `unfollow-${user.id}`,\n            onClick: () => handleUnfollow(user.id),\n            children: \"Unfollow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"se\",\n        type: \"text\",\n        \"data-testid\": \"add-follower-name\",\n        placeholder: \"Enter name\",\n        value: newFollowerName,\n        onChange: e => setNewFollowerName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"add-follower\",\n        onClick: handleAddFollower,\n        children: \"Add Follower\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 26\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        \"data-testid\": \"search-test\",\n        type: \"text\",\n        placeholder: \"Search by author or text...\",\n        value: searchQuery,\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"user-posts\",\n      children: userPosts.filter(post => {\n        return post.title.toLowerCase().includes(searchQuery.toLowerCase()) || post.body.toLowerCase().includes(searchQuery.toLowerCase()) || post.user.username.toLowerCase().includes(searchQuery.toLowerCase());\n      }).map(post => /*#__PURE__*/_jsxDEV(Posts, {\n        post: post,\n        onComment: handleComment,\n        onEdit: handleEdit\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"Hmoy8UbdMOHBiZPd8LyJawX44pM=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","useNavigate","MainHeader","Posts","UserInfoGrid","PostGrid","userPostsTest","usersInfo","axios","jsxDEV","_jsxDEV","MainPage","_s","userPosts","setUserPosts","navigate","searchQuery","setSearchQuery","newFollowerName","setNewFollowerName","followedUsers","setFollowedUsers","errorMessage","setErrorMessage","location","userData","state","defaultPostImage","fetchFollowers","fetchUserPosts","username","console","log","response","get","withCredentials","usernames","data","following","length","profiles","Promise","all","map","then","res","catch","err","error","handleAddFollower","put","message","handleUnfollow","userId","updatedFollowedUsers","filter","user","id","updatedPosts","post","sortedPosts","sort","a","b","Date","timestamp","handleSearch","e","target","value","handleComment","postId","handleEdit","handlePostSubmit","newPost","handleStatusUpdate","newStatus","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onUpdateStatus","onPostSubmit","src","avatar","alt","headline","onClick","type","placeholder","onChange","style","color","title","toLowerCase","includes","body","onComment","onEdit","_c","$RefreshReg$"],"sources":["/Users/gaoqiantong/Desktop/comp431/hw/final-frontend-Moongram/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MainHeader from '../components/MainHeader';\nimport Posts from '../components/Posts';\nimport UserInfoGrid from '../components/UserInfoGrid';\nimport PostGrid from '../components/PostGrid';\nimport userPostsTest from '../posts.json';\nimport usersInfo from '../users.json'\nimport axios from 'axios';\n\nconst MainPage = () => {\n  const [userPosts, setUserPosts] = useState([]);\n  const navigate = useNavigate();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [newFollowerName, setNewFollowerName] = useState('');\n  const [followedUsers, setFollowedUsers] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const location = useLocation();\n  const userData = location.state.userData;\n  const defaultPostImage = 'https://media.istockphoto.com/id/1420755455/photo/grunge-dirty-background-overlay.webp?b=1&s=170667a&w=0&k=20&c=7wfOkV1I0RJVAsuZlCzMD8zRenjlWo1hUYCAIsGBckw=';\n  useEffect(() => {\n    // const fetchFollowers = async () => {\n    //     // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n    //     // const data = await response.json();\n    //     const data = usersInfo;\n\n    //     if (!Number.isInteger(userData.id)) {\n    //       setFollowedUsers([])\n    //       return ([])\n    //     }\n    //     const loggedInUser = data.find(user => user.id === userData.id);\n    //     const followingIds = Array.from({ length: 3 }, (_, index) => (userData.id + index + 1) % 10 || 10);\n    //     const followedUsersList = data.filter(user => followingIds.includes(user.id) && user.id !== userData.id);\n\n    //     setFollowedUsers(followedUsersList);\n    //     return followedUsersList;\n    // };\n    \n  fetchFollowers()\n    const fetchUserPosts = async (followedUsers) => {\n        // // const responseForLoggedUser = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userData.id}`);\n        // // const postsForLoggedUser = await responseForLoggedUser.json();\n        // const postsForLoggedUser = userPostsTest.filter(post => post.userId === userData.id);\n        // // const postsPromises = followedUsers.map(user => \n        // //     fetch(`https://jsonplaceholder.typicode.com/posts?userId=${user.id}`).then(res => res.json())\n        // // );\n        // const postsPromises = followedUsers.map(user => \n        //   userPostsTest.filter(post => post.userId === user.id)\n        // );\n        \n        // const postsResults = await Promise.all(postsPromises);\n\n        // const flattenedFollowedUsersPosts = [].concat(...postsResults).map(post => {\n        //     const userForPost = followedUsers.find(u => u.id === post.userId);\n        //     return {\n        //         ...post,\n        //         user: userForPost,\n        //         timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n        //         image: defaultPostImage\n        //     };\n        // });\n\n        // const userPostsList = postsForLoggedUser.map(post => ({\n        //     ...post,\n        //     user: userData,\n        //     timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n        //     image: defaultPostImage\n        // }));\n\n        // const mergedPosts = [...userPostsList, ...flattenedFollowedUsersPosts];\n\n        // const sortedPosts = mergedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        // setUserPosts(sortedPosts);\n    };\n//     fetchFollowers().then(\n//       followedUsers => fetchUserPosts(followedUsers));\n//     // fetchFollowers().then(\n//     // fetchUserPosts(followedUsers)\n// console.log(followedUsers);\n }, [userData.username]);\n\n const fetchUserPosts = async () => {\n    \n }\n const fetchFollowers = async () => {\n  try {\n    console.log(userData.username)\n      const response = await axios.get(`http://localhost:3000/following/${userData.username}`, { withCredentials: true });\n      const usernames = response.data.following;\n      console.log(usernames)\n      if (usernames.length === 0) {\n        return ([])\n      }\n      const profiles = await Promise.all(\n        usernames.map(username =>\n            axios.get(`http://localhost:3000/profile/${username}`, { withCredentials: true })\n                .then(res => res.data)\n                .catch(err => {\n                    console.error(`Error fetching profile for ${username}:`, err);\n                    return null; // or handle the error as appropriate\n                })\n        )\n    );\n    \n\n      setFollowedUsers(profiles);\n      console.log(followedUsers, profiles)\n      return profiles;\n  } catch (error) {\n      console.error('Error fetching followers:', error);\n  }\n};\n const handleAddFollower = async () => {\n  if (newFollowerName == userData.username) {\n    setErrorMessage(\"You cannot follow yourself.\");  \n    setNewFollowerName('');\n    return;\n  }\n  try {\n    const response = await axios.put(`http://localhost:3000/following/${newFollowerName}`, {}, { withCredentials: true });\n    if (response.data.username == userData.username) {\n      setErrorMessage(\"\");  \n      setNewFollowerName('');\n      fetchFollowers();\n    } else {\n      setNewFollowerName('');\n      setErrorMessage(\"user not found.\");\n    }\n  } catch (error) {\n    setNewFollowerName('');\n    setErrorMessage(error.response.data.message);\n  };}\n  // const handleAddFollower = async () => {\n  //   console.log(\"get in\")\n  //   try {\n  //     console.log(\"dfdfd\")\n  //     const response = await axios.put(`http://localhost:3000/following/${newFollowerName}`, {}, { withCredentials: true });\n  //     console.log(\"sssss\",response)\n  //     if (response.data.username == userData.username) {\n  //       console.log('Follower added');\n  //     } else {\n  //       console.log('Follower add failed');\n  //       setErrorMessage(\"user not found.\");\n  //     }\n  //   } catch (error) {\n  //     console.log(error);\n  //   };\n  //   // // const response = await fetch('https://jsonplaceholder.typicode.com/users');\n  //   // // const users = await response.json();\n  //   // const users = usersInfo;\n\n  //   // const newFollower = users.find(user => user.username.toLowerCase() === newFollowerName.toLowerCase());\n  \n  //   // if (newFollower && newFollower.id != userData.id) {\n  //   //   setFollowedUsers([...followedUsers, newFollower]);\n  //   //   // const responseForNewFollower = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${newFollower.id}`);\n  //   //   // const postsForNewFollower = await responseForNewFollower.json();\n  //   //   const postsForNewFollower = userPostsTest.filter(post => post.userId === newFollower.id)\n\n\n  //   //   const postsWithTimestampAndImage = postsForNewFollower.map(post => ({\n  //   //     ...post,\n  //   //     user: newFollower,\n  //   //     timestamp: new Date(Date.now() - Math.floor(Math.random() * 10 * 365 * 24 * 60 * 60 * 1000)).toLocaleString(),\n  //   //     image: defaultPostImage\n  //   //   }));\n      \n  //   //   const updatedPosts = [...userPosts, ...postsWithTimestampAndImage];\n  //   //   const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n  //   //   setUserPosts(sortedPosts);\n  //   //   setErrorMessage(''); \n  //   // } else {\n  //   //   setErrorMessage('User not found or invalid.');\n  //   // }\n  \n  //   // setNewFollowerName('');\n  // };\n  \n\n  const handleUnfollow = userId => {\n    const updatedFollowedUsers = followedUsers.filter(user => user.id !== userId);\n    setFollowedUsers(updatedFollowedUsers);\n    const updatedPosts = userPosts.filter(post => post.user.id !== userId);\n    const sortedPosts = updatedPosts.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n    setUserPosts(sortedPosts);\n  };\n\n  const handleSearch = (e) => {\n    setSearchQuery(e.target.value)\n  };\n\n  const handleComment = postId => {\n  };\n\n  const handleEdit = postId => {\n  \n  };\n\n  const handlePostSubmit = newPost => {\n    setUserPosts([newPost, ...userPosts]);\n  };\n\n  const handleStatusUpdate = newStatus => {\n\n  };\n\n  return (\n    <div>\n      <MainHeader navigate={navigate} userData={userData} />\n      <div className=\"main-content\">\n        <UserInfoGrid user={userData} onUpdateStatus={handleStatusUpdate} />\n        <PostGrid user={userData} onPostSubmit={handlePostSubmit} />\n      </div>\n      <div className=\"sidebar\">\n        <h2 className = \"follow-user-h2\">Followed Users</h2>\n        <ul className=\"follow-user-ul\">\n          {followedUsers.map(user => (\n            <li className='follow-user-li'key={user.id}>\n              <img className='follow-user-img' src={user.avatar} alt=\"Avatar\" />\n              <p>{user.username}</p>\n              <p>{user.headline}</p>\n\n              <button data-testid={`unfollow-${user.id}`} onClick={() => handleUnfollow(user.id)}>Unfollow</button>\n            </li>\n          ))}\n        </ul>\n        <input className='se'\n          type=\"text\"\n          data-testid='add-follower-name'\n          placeholder=\"Enter name\"\n          value={newFollowerName}\n          onChange={e => setNewFollowerName(e.target.value)}\n        />\n        <button data-testid='add-follower' onClick={handleAddFollower}>Add Follower</button>\n        {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}\n\n      </div>\n      <div className=\"search-bar\">\n        <input data-testid='search-test'\n          type=\"text\"\n          placeholder=\"Search by author or text...\"\n          value={searchQuery}\n          onChange={handleSearch}\n        />\n      </div>\n      <div data-testid='user-posts'>\n      {userPosts.filter(post => {\n        return post.title.toLowerCase().includes(searchQuery.toLowerCase()) || post.body.toLowerCase().includes(searchQuery.toLowerCase()) || post.user.username.toLowerCase().includes(searchQuery.toLowerCase()) ;\n      }).map(post => (\n        <Posts\n          key={post.id}\n          post={post}\n          onComment={handleComment}\n          onEdit={handleEdit}\n        />\n      ))}\n    </div>\n    </div>\n  );\n};\n\nexport default MainPage;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}